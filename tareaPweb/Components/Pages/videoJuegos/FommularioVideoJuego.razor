@page "/videojuego-form/{Id:int?}"
@page "/videojuegos-detalles/{Id:int?}"

@using Microsoft.EntityFrameworkCore
@using tareaPweb.Data
@inject AppDbContext context
@inject NavigationManager Navigation
@using System.ComponentModel.DataAnnotations
@using tareaPweb.models
@rendermode InteractiveServer


<div class="form-container">
    <div class="card mb-3">
        <div class="card-header">
            <h3>@(@Id > 0 ? "Editar Videojuego" : "Agregar Videojuego")</h3>
        </div>
        <div class="card-body">

            <EditForm Model="nuevoVideojuego" OnValidSubmit="Guardar">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="nombre" class="form-label">Nombre</label>
                    <InputText id="nombre" class="form-control" @bind-Value="nuevoVideojuego.Nombre" disabled="@detalle" />
                </div>

                <div class="mb-3">
                    <label for="desarrollador" class="form-label">Desarrollador</label>
                    <InputText id="desarrollador" class="form-control" @bind-Value="nuevoVideojuego.Desarrollador" disabled="@detalle" />
                </div>

                <div class="mb-3">
                    <label for="plataforma" class="form-label">Plataforma</label>
                    <InputSelect placeholder="Seleccionar Plataforma" id="plataforma" class="form-select" @bind-Value="nuevoVideojuego.PlataformaId" disabled="@detalle"  >
                        @foreach (Plataforma plataforma in plataformas)
                        {
                            <option value="@plataforma.PlataformaId">@plataforma.Nombre</option>
                        }
                    </InputSelect>
                </div>

                <div class="mb-3">
                    <label for="genero" class="form-label">Género</label>
                    <InputText id="genero" class="form-control" @bind-Value="nuevoVideojuego.Genero" disabled="@detalle" />
                </div>

                <div class="mb-3">
                    <label for="fechaLanzamiento" class="form-label">Fecha de Lanzamiento</label>
                    <InputDate id="fechaLanzamiento" class="form-control" min="2000-01-01"
                        @bind-Value="nuevoVideojuego.FechaLanzamiento" />
                </div>

                <div class="mb-3">
                    <label for="imagenPortada" class="form-label">Imagen de Portada (URL)</label>
                    <InputText id="imagenPortada" class="form-control" @bind-Value="nuevoVideojuego.ImagenPortada" disabled="@detalle" />
                </div>

                <div class="mb-3">
                    <label for="descripcion" class="form-label">Descripción</label>
                    <InputTextArea id="descripcion" class="form-control" @bind-Value="nuevoVideojuego.Descripcion" disabled="@detalle"
                        rows="4" />
                </div>
                @if(!detalle){
                <button type="submit" class="btn btn-primary">Guardar Videojuego</button>}
            </EditForm>

        </div>
    </div>
</div>


@code {
    [Parameter] public int? Id { get; set; }
    bool detalle = false;

    private VideoJuegos nuevoVideojuego = new VideoJuegos();
    private List<Plataforma> plataformas = new List<Plataforma>();


    protected override async Task OnInitializedAsync()
    {

        plataformas = await context.Plataformas.Where(x => x.Estado == true).ToListAsync();
        if (Id > 0)
        {
            var videoJuegoExistente = await context.Videojuegos.FindAsync(Id);
            if (videoJuegoExistente == null)
            {
                Navigation.NavigateTo("/videojuegos");
            }
            else
            {
                nuevoVideojuego = videoJuegoExistente;
                var videoJuegoPlataforma = await context.Plataformas.FindAsync(nuevoVideojuego.PlataformaId);
                nuevoVideojuego.Plataforma = videoJuegoPlataforma ?? new Plataforma();
                if (Navigation.Uri.Contains("/videojuegos-detalles"))
                {
                    detalle = true;
                }
            }
        }

    }

    private async Task Guardar()
    {
        nuevoVideojuego.Plataforma = plataformas.Find(x => x.PlataformaId == nuevoVideojuego.PlataformaId) ?? new Plataforma();
        if (Id > 0)
        {
            context.Videojuegos.Update(nuevoVideojuego);
        }
        else
        {
            context.Videojuegos.Add(nuevoVideojuego);
        }
        
        await context.SaveChangesAsync();
        Navigation.NavigateTo("/videojuegos");
    }
}